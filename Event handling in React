Event handling in React:
Event handling in react is how you make your app do some thing when the user interacts with it,
Like clicking a button, submitting a form
1)clicking a button(onClick)
2)pressing a key(keyDown)
3)moving the mouse(onMouseMove)
4)typing a text box(onChange)

how to use event in react:
Use camelCase for events names
pass a function to the event(not to a function call)
This function will run when the event happens

1)onClick:
Code:
function App(){
  const handleClick=()=>{
    alert('button clicked')
  }
  return(
    <button onClick={handleClick}>Click Me</button>
  )
}
export default App;

2)onChange:
Key point:
Target is a property of the event object and is predefined by javascript for DOM events
event.target: always refers the element that triggered the event
event.target.value: used to access the value of input elements buttons form elements
Code:
import React,{useState} from "react";
function App(){
  const[text,setText]=useState("")
  const handleChange=(event)=>{
    setText(event.target.value)
  }
  return(
    <div>
      <input type="text" value={text} onChange={handleChange}></input>
      <p>Your text:{text}</p>
    </div>
  )
}
export default App;

3)onMouseEnter,onMouseLeave:
Code:
import React,{useState} from "react";
function App(){
  const[isHovered,setIsHovered]=useState(false)
  const handleMouseEnter=()=>{
    setIsHovered(true);
  }
  const handleMouseLeave=()=>{
    setIsHovered(false);
  }
  return(
    <div>
      <button onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}
      style={{backgroundColor:"isHovered"?'lightblue':'lightgray',color:"isHovered"?'white':'black'}}
      >Hover Me</button>
      {isHovered && <p>Mouse is over the button!</p>}
    </div>
  )
}
export default App;
