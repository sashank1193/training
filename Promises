Promise:
	• A promise is a special JavaScript object that represents the eventual completion(or failure) of an asynchronous operation.
	• It allows to handle asynchronous tasks more efficiently than callbacks.
Three states :
1.pending : The initial state , the promise is still waiting for the operation to finish.
2.fulfilled: The operation completed successfully.
3.rejected: The operation failed;

Exp:
1.To Create a promise - new promise()
Two parameters-
Resolve -- to mark the promise as successfully.
Reject -- mark it as failed

2.handling the result :
.then() method is called when promise is fulfilled.
It will receives the result from resolve()
.catch() method is called if the promise is rejected it receives the error message from reject()

Chaining promises:
Ex:

let promise=new Promise((resolve,reject)=>{
    resolve(5);  //initial resolve value is 5
})
promise
.then(result=>{
    console.log(result);
    return result*2;
})
.then(result=>{
    console.log(result);
    return result+3  //return a new value
})
.then(result=>{
    console.log(result);
})
.catch(error=>{
    console.log("error",error);
})

Ex: promise with setTimeout
--asynchronous task using setTimeout, and the promise will resolve after a certain amount of time
Code:
        let fetchData = new Promise((resolve,reject)=>{
        let dataFecthed =true
        setTimeout(()=>{
            if(dataFecthed){
                resolve("data fetched successfully")
            }else{
                reject("data fetching failed")
            }
        },2000)
    })
    fetchData
    .then(result=>{
        console.log(result)
    })
    .catch(error=>{
        console.log(error)
    })
